/{db}/{doc}/{attachment}:
  parameters:
    - $ref: '#/parameters/db'
    - $ref: '#/parameters/doc'
    - $ref: '#/parameters/attachment'
  get:
    tags:
      - attachment
    summary: Get attachment
    description: |
      This request retrieves a file attachment associated with the document. The raw data of the associated attachment is returned (just as if you were accessing a static file). The Content-Type response header is the same content type set when the document attachment was added to the database.
    parameters:
      - $ref: '#/parameters/rev'
    responses:
      200:
        description: The message body contains the attachment, in the format specified in the Content-Type header.
      304:
        description: Not Modified, the attachment wasn't modified if ETag equals the If-None-Match header
      404:
        description: Not Found, the specified database, document or attachment was not found.
  put:
    tags:
      - attachment
    summary: Add or update document
    description: |
      This request adds or updates the supplied request content as an attachment to the specified document. The attachment name must be a URL-encoded string (the file name). You must also supply either the rev query parameter or the If-Match HTTP header for validation, and the Content-Type headers (to set the attachment content type).

        When uploading an attachment using an existing attachment name, the corresponding stored content of the database will be updated. Because you must supply the revision information to add an attachment to the document, this serves as validation to update the existing attachment.

        Uploading an attachment updates the corresponding document revision. Revisions are tracked for the parent document, not individual attachments.
    responses:
      200:
        description: Operation completed successfully
        schema:
          $ref: '#/definitions/Success'
      409:
        description: Conflict, the document revision wasn't specified or it's not the latest.
/{db}/_bulk_docs:
  parameters:
    - $ref: '#/parameters/db'
  post:
    tags:
      - database
    summary: Bulk docs
    description: |
      This request enables you to add, update, or delete multiple documents to a database in a single request. To add new documents, you can either specify the ID (_id) or let the software create an ID. To update existing documents, you must provide the document ID, revision identifier (_rev), and new document values. To delete existing documents you must provide the document ID, revision identifier, and the deletion flag (_deleted).
    parameters:
      - in: body
        name: body
        description: The request body
        schema:
          properties:
            all_or_nothing:
              description: Indicates whether to use all-or-nothing semantics for the database commit mode
              type: boolean
            docs:
              description: List containing new or updated documents. Each object in the array can contain the following properties _id, _rev, _deleted, and values for new and updated documents.
              type: array
              items:
                type: object
            new_edits:
              description: Indicates whether to assign new revision identifiers to new edits.
              type: boolean
    responses:
      201:
        description: Documents have been created or updated
        schema:
          type: array
          items:
            $ref: '#/definitions/Success'
/{db}/_bulk_get:
  parameters:
    - $ref: '#/parameters/db'
  post:
    tags:
      - database
    summary: Bulk get
    description: |
      This request returns any number of documents, as individual bodies in a MIME multipart response.
      Each enclosed body contains one requested document. The bodies appear in the same order as in the request, but can also be identified by their X-Doc-ID and X-Rev-ID headers.
      A body for a document with no attachments will have content type application/json and contain the document itself.
      A body for a document that has attachments will be written as a nested multipart/related body. Its first part will be the document's JSON, and the subsequent parts will be the attachments (each identified by a Content-Disposition header giving its attachment name.)
    parameters:
      - $ref: '#/parameters/revs'
      - $ref: '#/parameters/attachments'
      - in: body
        name: body
        description: List of documents being requested. Each array element is an object that must contain an id property giving the document ID. It may contain a rev property if a specific revision is desired. It may contain an atts_since property (as in a single-document GET) to limit which attachments are sent.
        schema:
          type: object
          properties:
            docs:
              type: array
              items:
                type: string
    responses:
      200:
        description: Request completed successfully
        schema:
          type: object
          properties:
            docs:
              type: array
              items:
                $ref: '#/definitions/Success'